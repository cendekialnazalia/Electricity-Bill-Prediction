# -*- coding: utf-8 -*-
"""Electricity Bill Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sAsCM4XIJfm50GCQPnocCcSnBOEX10c3

Import Package
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""Load Dataset"""

# link file di Google Drive
url = 'https://drive.google.com/file/d/1COGBPHhANXxutOp7c4lzS6VsovBL0HeF/view?usp=sharing'

# ambil file ID dari link
file_id = url.split('/d/')[1].split('/')[0]

# buat direct download link
dwn_url = f'https://drive.google.com/uc?id={file_id}'

# load dataset
consumption = pd.read_csv(dwn_url)

consumption

"""Exploratory Data Analysis"""

consumption.info()

consumption.describe()

"""Cek missing values"""

print("Missing values:\n", consumption.isnull().sum())

"""Visualisasi sederhana"""

sns.pairplot(consumption)
plt.show()

"""Preprocessing"""

# Target: amount_paid
# Features: semua kolom kecuali amount_paid

X = consumption.drop("amount_paid", axis=1)
y = consumption["amount_paid"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Linear Regression"""

lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)

# Prediksi
y_pred_lin = lin_reg.predict(X_test)

# Evaluasi
print("\n=== Linear Regression Evaluation ===")
print("MAE:", mean_absolute_error(y_test, y_pred_lin))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_lin)))
print("R2 Score:", r2_score(y_test, y_pred_lin))

"""Random Forest Regression"""

rf_reg = RandomForestRegressor(n_estimators=100, random_state=42)
rf_reg.fit(X_train, y_train)


y_pred_rf = rf_reg.predict(X_test)


print("\n=== Random Forest Evaluation ===")
print("MAE:", mean_absolute_error(y_test, y_pred_rf))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_rf)))
print("R2 Score:", r2_score(y_test, y_pred_rf))

"""Visualisasi Perbandingan Prediksi"""

plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred_rf, alpha=0.7, label="Random Forest")
plt.scatter(y_test, y_pred_lin, alpha=0.7, label="Linear Reg")
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=2)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted Electricity Bill")
plt.legend()
plt.show()

"""Feature Importance dari Random Forest"""

importances = rf_reg.feature_importances_
feature_names = X.columns


feat_imp = pd.DataFrame({"Feature": feature_names, "Importance": importances})
feat_imp = feat_imp.sort_values(by="Importance", ascending=False)


plt.figure(figsize=(10,6))
sns.barplot(x="Importance", y="Feature", data=feat_imp, palette="viridis")
plt.title("Feature Importance - Random Forest")
plt.show()